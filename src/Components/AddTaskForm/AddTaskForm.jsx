/*
NOTAS:
Style: 
- cre칠 un module, porque cre칤 que por ah칤 era conveniente. Son libres de borrarlo o editarlo.
- Hay una alerta que aparece cuando la fecha l칤mite elegida est치 en el pasado. Es un span con la clase 'warning'.

Validaciones:
- La fecha l칤mite debe estar en el futuro. Validaci칩n din치mica con un span que se hace visible.
- No se puede enviar si el t칤tulo o la fecha est치n vac칤os. El bot칩n explica porque en un hover.
- Los inputs de texto son sanitizados con la funci칩n 'sanitize'.
- La categor칤a no puede estar vac칤a.

TODO:
- Enviar la informaci칩n al backend.
- Mandar tarea a View? - cre칠 el espacio para la funci칩n pero si no sirve la sacan

Para mejorar:
- la informaci칩n de las categor칤as se declaran como constantes al principio de este c칩digo. Considerando 
que son las mismas que se usan al filtrar, quiz치 ser칤a conveniente que se obtubieran de otro lado. Quiz치 como 
prop? Coordinar.
- Las opciones para categor칤as no se renderizan din치micamente porque usan emojis. Si se cambiaran las categor칤as
habr칤a que cambiar el formulario a mano. No creo que valga la pena cambiarlo igual.
- La Fecha aparece en formato aaaa-mm-dd por default. Es decir, un string '2023-04-25'. Si conviene se puede cambiar.

*/
import React, { useState } from 'react'
import "./AddTaskForm.module.css"


// Consts ---------
const CATEGORIAS = {
  rojo: "rojo",
  amarillo: "amarillo",
  verde: "verde"
}

function sanitize(string) {
  //agregar sustitutos a caracteres especiales ac치
  const map = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      "/": '&#x2F;',
      "`": "&grave;",
      "\\": "&#92;"
  };
  const reg = /[&<>"'/`\\]/ig; //agregar caracteres que hay que reemplazar ac치
  string = string.replace(reg, (match)=>(map[match]));
  return string.trim();
}

//este en particular lo defino como variable porque necesito referenciarlo en el handleChange
const fechaLimite = "fechaLimite";

const formVacia = {
  titulo: "",
  descripcion: "",
  [fechaLimite]: "",
  categoria: ""
};


// La L칩gica ------------
function AddTaskForm( {agregarNuevaTarea} ) {
  //Esta propiedad es opcional si decidimos que este form deba pasarle a la
  //vista la informaci칩n de la nueva tarea, es como me imagino que podr칤a ser.

  const [form, setForm] = useState(formVacia);

  const [fechaWarning, setFechaWarning] = useState(false);

  const sePuedeEnviar = (titulo, fecha) => {
    if(titulo == "" || fecha == ""){
      return false
    }
    return true;
  }

  const handleChange = (e) => {
    let { name, value } = e.target;

    //me aseguro que la fecha l칤mite est칠 en el futuro
    if (name == fechaLimite) {
      if (new Date(value) < new Date()){
        value = "";
        setFechaWarning(true);
      } else if (fechaWarning == true) {
        setFechaWarning(false);
      }
    }

    setForm({
      ...form,
      [name]: value
    });

  };

  const handleSubmit = (e) => {
    e.preventDefault();

    form.titulo = sanitize(form.titulo);
    form.descripcion = sanitize(form.descripcion);

    //TODO: Hacer que esto funcione - coordinar con grupo de endpoints
    //const nuevaTarea = agregarTarea(form);

    //TODO: Hacer que esto funcione - coordinar con View de Tareas
    //agregarNuevaTarea(nuevaTarea)

    setForm(formVacia);
  }

  // La Vista -----------
  return (
    <form onSubmit={handleSubmit}>

      <label htmlFor="titulo">T칤tulo: </label>
      <input name='titulo' type="text" value={form.titulo} onChange={handleChange} />
      <br />

      <label htmlFor="descripcion">Descripci칩n: </label>
      <input name='descripcion' type="text" value={form.descripcion} onChange={handleChange} />
      <br />

      <label htmlFor="categoria">Categor칤a: </label>
      <select name="categoria" onChange={handleChange} defaultValue={CATEGORIAS.verde}>
        <option value={CATEGORIAS.rojo}>游린</option>
        <option value={CATEGORIAS.amarillo}>游릳</option>
        <option value={CATEGORIAS.verde}>游릴</option>
      </select>
      <br />

      <label htmlFor="fechaLimite">Fecha l칤mite: </label>
      <input name='fechaLimite' type="date" value={form.fechaLimite} onChange={handleChange} />
      <span className='warning' hidden={!fechaWarning}>La fecha l칤mite debe encontrarse en el futuro.</span>
      <br />

      <input 
      type="submit" 
      value="Agregar Tarea" 
      disabled={!sePuedeEnviar(form.titulo, form.fechaLimite)}
      title={sePuedeEnviar(form.titulo, form.fechaLimite) ? "" : "La tarea debe tener un t칤tulo y una fecha l칤mite."}
      />
    </form>
  )
}

export default AddTaskForm