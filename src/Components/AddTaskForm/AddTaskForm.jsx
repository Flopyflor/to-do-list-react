/*
NOTAS:
Style: 
- cre칠 un module, porque cre칤 que por ah칤 era conveniente. Son libres de borrarlo o editarlo.
- Hay una alerta que aparece cuando la fecha l칤mite elegida est치 en el pasado. Es un span con la clase 'warning'.

Validaciones:
- La fecha l칤mite debe estar en el futuro. Validaci칩n din치mica con un span que se hace visible.
- Si al enviar el t칤tulo est치 vac칤o hay una alert.
- Los inputs de texto son sanitizados con la funci칩n 'sanitize'.
- La categor칤a no puede estar vac칤a.

TODO:
- Enviar la informaci칩n al backend.

Para mejorar:
- la informaci칩n de las categor칤as se declaran como constantes al principio de este c칩digo. Considerando 
que son las mismas que se usan al filtrar, quiz치 ser칤a conveniente que se obtubieran de otro lado. Quiz치 como 
prop? Coordinar.

*/


import React, { useState } from 'react'
import "./AddTaskForm.module.css"
import { postTasks } from '../../../service/controller/tasksController';

const CATEGORIAS = {
  rojo: "rojo",
  amarillo: "amarillo",
  verde: "verde"
}

function sanitize(string) {
  //agregar sustitutos a caracteres especiales ac치
  const map = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      "/": '&#x2F;',
      "`": "&grave;",
      "\\": "&#92;"
  };
  const reg = /[&<>"'/`\\]/ig; //agregar caracteres que hay que reemplazar ac치
  string = string.replace(reg, (match)=>(map[match]));
  return string.trim();
}

function AddTaskForm() {

  //este en particular lo defino como variable porque necesito referenciarlo en el handleChange
  const fechaLimite = "fechaLimite";

  const [form, setForm] = useState({
    titulo: "",
    descripcion: "",
    [fechaLimite]: "",
    categoria: ""
  });

  const [fechaWarning, setFechaWarning] = useState(false);

  const handleChange = (e) => {
    let { name, value } = e.target;

    //me aseguro que la fecha l칤mite est칠 en el futuro
    if (name == fechaLimite) {
      if (new Date(value) < new Date()){
        value = "";
        setFechaWarning(true);
      } else if (fechaWarning == true) {
        setFechaWarning(false);
      }
    }

    setForm({
      ...form,
      [name]: value
    });

  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if(form.titulo == ""){
      alert("El t칤tulo no puede estar vac칤o");
      return
    }

    form.titulo = sanitize(form.titulo);
    form.descripcion = sanitize(form.descripcion);

    //TODO: Hacer que esto funcione - coordinar con grupo de endpoints
    //const res = postTasks(form);
    console.log(form);
  }

  // La Vista -----------
  return (
    <form action="" onSubmit={handleSubmit}>

      <label htmlFor="titulo">T칤tulo: </label>
      <input id="titulo" name='titulo' type="text" value={form.titulo} onChange={handleChange} />
      <br />

      <label htmlFor="descripcion">Descripci칩n: </label>
      <input id="descripcion" name='descripcion' type="text" value={form.descripcion} onChange={handleChange} />
      <br />

      <label htmlFor="categoria">Categor칤a: </label>
      <select name="categoria" id="categoria" onChange={handleChange} defaultValue={CATEGORIAS.verde}>
        <option value={CATEGORIAS.rojo}>游린</option>
        <option value={CATEGORIAS.amarillo}>游릳</option>
        <option value={CATEGORIAS.verde}>游릴</option>
      </select>
      <br />

      <label htmlFor="fechaLimite">Fecha l칤mite: </label>
      <input id="fechaLimite" name='fechaLimite' type="date" value={form.fechaLimite} onChange={handleChange} />
      <span className='warning' hidden={!fechaWarning}>La fecha l칤mite debe encontrarse en el futuro.</span>
      <br />

      <input type="submit" value="Agregar Tarea" />
    </form>
  )
}

export default AddTaskForm